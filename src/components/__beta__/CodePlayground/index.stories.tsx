import { SupportedLanguage } from '@/types'
import { CodePlayground } from '.'
import { StoryObj, Meta } from '@storybook/react'

const meta: Meta<typeof CodePlayground> = {
  component: CodePlayground,
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <div className="m-auto w-full max-w-2xl">
        <Story />
      </div>
    ),
  ],
}

export default meta

type Story = StoryObj<typeof CodePlayground>

const snippets: Map<SupportedLanguage, string> = new Map([
  [
    'typescript',
    `const sdk = new SDK()
const users = await sdk.getUsers()
console.log(users)`,
  ],
  [
    'python',
    `import sdk
users = sdk.getUsers()
print(users)`,
  ],
  [
    'go',
    `package main
import "sdk"
users := sdk.getUsers()
fmt.Println(users)`,
  ],
  [
    'ruby',
    `require 'sdk'
users = sdk.getUsers()
puts users`,
  ],
])

export const Default: Story = {
  args: {
    snippets,
    heading: (
      <div className="flex items-center gap-2.5 px-2 font-mono text-sm">
        <span className="text-blue-400">GET</span>{' '}
        <span className="text-muted">/users</span>
      </div>
    ),
    footer: (
      <div className="text-muted ml-auto text-sm">
        Code snippets generated by AI âœ¨
      </div>
    ),
  },
}

const kitchenSink = `function getFooBar(bar: FooType) : BarType {
  return bar
}

function getBarFoo(foo: BarType) : FooType {
  return foo
}

const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]

for (const foo of fooBar) {
  console.log(foo)
}
`

export const KitchenSink: Story = {
  args: {
    ...Default.args,
    snippets: new Map([['typescript', kitchenSink]]),
  },
}

export const NonCopyable: Story = {
  args: {
    ...Default.args,
    copyable: false,
  },
}

export const NoHeading: Story = {
  args: {
    ...Default.args,
    heading: null,
  },
}

export const NoFooter: Story = {
  args: {
    ...Default.args,
    footer: null,
  },
}

export const WithReallyLongCode: Story = {
  args: {
    ...Default.args,
    maxHeight: 400,
    snippets: new Map([
      [
        'typescript',
        `const foo = 'bar';
const bar = 'foo';
const baz = 'qux';
const qux = 'baz';
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}`,
      ],
    ]),
  },
}
