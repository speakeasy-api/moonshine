import { Icon } from '@/components/Icon'
import { CodePlayground, CodePlaygroundSnippets } from '.'
import { StoryObj, Meta } from '@storybook/react'

const meta: Meta<typeof CodePlayground> = {
  component: CodePlayground,
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <div className="m-auto w-full max-w-2xl">
        <Story />
      </div>
    ),
  ],
}

export default meta

type Story = StoryObj<typeof CodePlayground>

const snippets: CodePlaygroundSnippets = {
  typescript: {
    code: `const sdk = new SDK()
const users = await sdk.getUsers()
console.log(users)`,
  },
  python: {
    code: `import sdk
users = sdk.getUsers()
print(users)`,
  },
  go: {
    code: `package main
import "sdk"
users := sdk.getUsers()
fmt.Println(users)`,
  },
  ruby: {
    code: `require 'sdk'
users = sdk.getUsers()
puts users`,
  },
  postman: {
    code: `const sdk = new SDK()
const users = sdk.getUsers()
console.log(users)`,
  },
}

export const Default: Story = {
  args: {
    snippets,
    children: [
      <CodePlayground.Header>
        <div className="flex items-center gap-2.5 px-2 font-mono text-sm">
          <span className="text-blue-400">GET</span>{' '}
          <span className="text-muted">/users</span>
        </div>
      </CodePlayground.Header>,
      <CodePlayground.Footer>
        <div className="text-muted ml-auto text-sm">
          Code snippets generated by AI ✨
        </div>
      </CodePlayground.Footer>,
    ],
  },
}

const kitchenSink = `function getFooBar(bar: FooType) : BarType {
  return bar
}

function getBarFoo(foo: BarType) : FooType {
  return foo
}

const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]

for (const foo of fooBar) {
  console.log(foo)
}
`

export const KitchenSink: Story = {
  args: {
    ...Default.args,
    snippets: { typescript: { code: kitchenSink } },
  },
}

export const NonCopyable: Story = {
  args: {
    ...Default.args,
    copyable: false,
  },
}

export const NoHeading: Story = {
  args: {
    ...Default.args,
    children: [
      <CodePlayground.Footer>
        <div className="text-muted ml-auto text-sm">
          Code snippets generated by AI ✨
        </div>
      </CodePlayground.Footer>,
    ],
  },
}
export const NoFooter: Story = {
  args: {
    ...Default.args,
    children: [
      <CodePlayground.Header>
        <div className="flex items-center gap-2.5 px-2 font-mono text-sm">
          <span className="text-blue-400">GET</span>{' '}
          <span className="text-muted">/users</span>
        </div>
      </CodePlayground.Header>,
    ],
  },
}

export const WithReallyLongCode: Story = {
  args: {
    ...Default.args,
    snippets: {
      typescript: {
        code: `const foo = 'bar';
const bar = 'foo';
const baz = 'qux';
const qux = 'baz';
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}`,
      },
    },
  },
}

export const WithSmallerContainer: Story = {
  args: {
    ...Default.args,
  },
  decorators: [
    (Story) => (
      <div className="w-full max-w-96">
        <Story />
      </div>
    ),
  ],
}

export const Loading: Story = {
  args: {
    ...Default.args,
    children: [
      <CodePlayground.Header>
        <div className="flex items-center gap-1.5 px-3 text-sm">
          <Icon name="loader-circle" className="text-muted animate-spin" />
          <span className="text-foreground">Generating...</span>
        </div>
      </CodePlayground.Header>,
    ],
    snippets: {
      typescript: {
        loading: true,
      },
    },
  },
}

export const ErrorState: Story = {
  args: {
    ...Default.args,
    snippets: {
      typescript: {
        loading: false,
        error: (
          <div className="flex flex-col gap-2 p-4">
            <h3 className="text-base font-semibold text-rose-400">
              Could not generate
            </h3>
            <p className="text-muted text-sm">
              This might be due to a temporary issue on our side. Please try
              again later.
            </p>
          </div>
        ),
      },
    },
  },
}

export const WithCustomCodeContainer: Story = {
  args: {
    ...Default.args,
    snippets: {
      typescript: {
        code: `const foo = 'bar';
const bar = 'foo';
const baz = 'qux';
const qux = 'baz';
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}`,
      },
      go: {
        code: `package main
import "sdk"

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)`,
      },
    },
    children: [
      <CodePlayground.Code className="max-h-96 min-h-72 overflow-y-auto" />,
      <CodePlayground.Footer>
        <div className="text-muted ml-auto text-sm">
          Code snippets generated by AI ✨
        </div>
      </CodePlayground.Footer>,
    ],
  },
}

export const NoLineNumbers: Story = {
  args: {
    ...Default.args,
    showLineNumbers: false,
  },
}

export const NoAnimations: Story = {
  args: {
    ...Default.args,
    animateOnLanguageChange: false,
  },
}

export const WithCustomLoading: Story = {
  args: {
    ...Default.args,
    snippets: {
      typescript: {
        loading: true,
      },
    },
    children: (
      <CodePlayground.Loading className="flex min-h-44 flex-row items-center justify-center gap-1 bg-gradient-to-r from-blue-500 to-purple-500 p-4 text-base">
        <Icon name="loader-circle" className="size-5 animate-spin" />
        Loading...
      </CodePlayground.Loading>
    ),
  },
}
