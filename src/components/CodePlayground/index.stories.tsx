import { Icon } from '@/components/Icon'
import { CodePlayground, CodePlaygroundSnippets } from '.'
import { StoryObj, Meta } from '@storybook/react-vite'
import { useState } from 'react'

const meta: Meta<typeof CodePlayground> = {
  component: CodePlayground,
  tags: ['autodocs'],
  decorators: [
    (Story) => (
      <div className="m-auto w-full max-w-2xl">
        <Story />
      </div>
    ),
  ],
}

export default meta

type Story = StoryObj<typeof CodePlayground>

const snippets: CodePlaygroundSnippets = {
  typescript: {
    code: `const sdk = new SDK()
const users = await sdk.getUsers()
console.log(users)`,
  },
  python: {
    code: `import sdk
users = sdk.getUsers()
print(users)`,
  },
  go: {
    code: `package main
import "sdk"
users := sdk.getUsers()
fmt.Println(users)`,
  },
  ruby: {
    code: `require 'sdk'
users = sdk.getUsers()
puts users`,
  },
  postman: {
    code: `const sdk = new SDK()
const users = sdk.getUsers()
console.log(users)`,
  },
  json: {
    code: `{
  "users": [
    {
      "id": 1,
      "name": "John Doe"
    },
  ]
}`,
  },
}

export const Default: Story = {
  decorators: [
    (Story, { args }) => {
      const [selectedLanguage, setSelectedLanguage] = useState(
        args.selectedLanguage
      )
      return (
        <Story
          args={{
            ...args,
            selectedLanguage,
            onChangeLanguage: setSelectedLanguage,
          }}
        />
      )
    },
  ],
  args: {
    snippets,
    selectedLanguage: 'typescript',
    children: [
      <CodePlayground.Header>
        <div className="flex items-center gap-2.5 px-2 font-mono text-sm">
          <span className="text-blue-400">GET</span>{' '}
          <span className="text-body-muted">/users</span>
        </div>
      </CodePlayground.Header>,
      <CodePlayground.Footer>
        <div className="text-body-muted ml-auto text-sm">
          Code snippets generated by AI ✨
        </div>
      </CodePlayground.Footer>,
    ],
  },
}

const kitchenSink = `function getFooBar(bar: FooType) : BarType {
  return bar
}

function getBarFoo(foo: BarType) : FooType {
  return foo
}

const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]

for (const foo of fooBar) {
  console.log(foo)
}
`

export const KitchenSink: Story = {
  ...Default,
  args: {
    ...Default.args,
    snippets: { typescript: { code: kitchenSink } },
  },
}

export const NonCopyable: Story = {
  ...Default,
  args: {
    ...Default.args,
    copyable: false,
  },
}

export const NoHeading: Story = {
  ...Default,
  args: {
    ...Default.args,
    children: [
      <CodePlayground.Footer>
        <div className="text-body-muted ml-auto text-sm">
          Code snippets generated by AI ✨
        </div>
      </CodePlayground.Footer>,
    ],
  },
}
export const NoFooter: Story = {
  ...Default,
  args: {
    ...Default.args,
    children: [
      <CodePlayground.Header>
        <div className="flex items-center gap-2.5 px-2 font-mono text-sm">
          <span className="text-blue-400">GET</span>{' '}
          <span className="text-body-muted">/users</span>
        </div>
      </CodePlayground.Header>,
    ],
  },
}

export const WithReallyLongCode: Story = {
  ...Default,
  args: {
    ...Default.args,
    snippets: {
      typescript: {
        code: `const foo = 'bar';
const bar = 'foo';
const baz = 'qux';
const qux = 'baz';
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}`,
      },
    },
  },
}

export const WithSmallerContainer: Story = {
  ...Default,
  args: {
    ...Default.args,
  },
  decorators: [
    (Story) => (
      <div className="w-full max-w-96">
        <Story />
      </div>
    ),
  ],
}

export const Loading: Story = {
  ...Default,
  args: {
    ...Default.args,
    children: [
      <CodePlayground.Header>
        <div className="flex items-center gap-1.5 px-3 text-sm">
          <Icon name="loader-circle" className="text-body-muted animate-spin" />
          <span className="text-foreground">Generating...</span>
        </div>
      </CodePlayground.Header>,
    ],
    snippets: {
      typescript: {
        loading: true,
      },
    },
  },
}

export const ErrorState: Story = {
  ...Default,
  args: {
    ...Default.args,
    error: (
      <div className="flex flex-col gap-2 p-4">
        <h3 className="text-base font-semibold text-rose-400">
          Could not generate
        </h3>
        <p className="text-body-muted text-sm">
          This might be due to a temporary issue on our side. Please try again
          later.
        </p>
      </div>
    ),
    snippets: {
      typescript: {
        loading: false,
      },
    },
  },
}

export const WithCustomCodeContainer: Story = {
  args: {
    ...Default.args,
    snippets: {
      typescript: {
        code: `const foo = 'bar';
const bar = 'foo';
const baz = 'qux';
const qux = 'baz';
const quux = 'corge';
const grault = 'garply';
const waldo = 'fred';
const plugh = 'xyzzy';
const corge = 'thud';
const fooBar = [
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
  { foo: 'foo', bar: 'bar' },
]
for (const foo of fooBar) {
  console.log(foo)
}`,
      },
      go: {
        code: `package main
import "sdk"

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)

users := sdk.getUsers()
fmt.Println(users)`,
      },
    },
    children: [
      <CodePlayground.Code className="max-h-96 min-h-72 overflow-y-auto" />,
      <CodePlayground.Footer>
        <div className="text-body-muted ml-auto text-sm">
          Code snippets generated by AI ✨
        </div>
      </CodePlayground.Footer>,
    ],
  },
}

export const NoLineNumbers: Story = {
  ...Default,
  args: {
    ...Default.args,
    showLineNumbers: false,
  },
}

export const OverflowingCode: Story = {
  ...Default,
  args: {
    ...Default.args,
    wordWrap: false,
    copyable: false,
    snippets: {
      typescript: {
        code: `const reallyLongLine = 'this is a really long line of code that will overflow the container'`,
      },
    },
  },
}

export const WordWrap: Story = {
  ...Default,
  args: {
    ...Default.args,
    wordWrap: true,
    snippets: {
      typescript: {
        code: `const reallyLongLine = 'this is a really long line of code that will overflow the container and wrap'`,
      },
    },
  },
}
